// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum PaymentMethod {
  CASH
  CASHLESS
}

enum Status {
  Pending
  Paid
  Shipped
  Completed
  Cancelled
}

model User {
  id           String        @id @default(cuid())
  name         String        @db.VarChar(100)
  email        String        @unique @db.VarChar(255)
  address      String?       @db.VarChar(255)
  imageId      String?       @db.VarChar(150)
  imageUrl     String?       @db.VarChar(255)
  password     String        @db.VarChar(255)
  role         Role          @default(USER)
  Cart         Cart?
  wishlists    Wishlist[]
  transactions Transaction[]
  reviews      Review[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@map("users")
}

model Brand {
  id        String    @id @default(cuid())
  name      String    @db.VarChar(100)
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("brands")
}

model Category {
  id        String    @id @default(cuid())
  name      String    @db.VarChar(100)
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("categories")
}

model Product {
  id               String            @id @default(cuid())
  name             String            @db.VarChar(100)
  slug             String            @unique @db.VarChar(100)
  description      String            @db.Text
  imageId          String            @db.VarChar(150)
  imageUrl         String            @db.VarChar(255)
  stock            Int               @default(0)
  price            Float
  brandId          String            @map("brand_id")
  brand            Brand             @relation(fields: [brandId], references: [id])
  categoryId       String            @map("category_id")
  category         Category          @relation(fields: [categoryId], references: [id])
  cartsItems       CartItem[]
  wishlists        Wishlist[]
  transactionItems TransactionItem[]
  reviews          Review[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  @@map("products")
}

model Cart {
  id        String     @id @default(cuid())
  userId    String     @unique @map("user_id")
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("carts")
}

model CartItem {
  id         String   @id @default(cuid())
  cartId     String   @map("cart_id")
  cart       Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId  String   @map("product_id")
  product    Product  @relation(fields: [productId], references: [id])
  quantity   Int
  totalPrice Int?     @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("cart_item")
}

model Wishlist {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  productId String   @map("product_id")
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId])
  @@map("wishlists")
}

model Transaction {
  id            String            @id @default(cuid())
  userId        String            @map("user_id")
  user          User              @relation(fields: [userId], references: [id])
  name          String            @db.VarChar(100)
  items         TransactionItem[]
  address       String            @db.VarChar(255)
  city          String            @db.VarChar(100)
  province      String            @db.VarChar(100)
  postalCode    String            @db.VarChar(20)
  phone         String            @db.VarChar(20)
  totalAmount   Float
  paymentMethod PaymentMethod     @default(CASH)
  status        Status            @default(Pending)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  @@map("transactions")
}

model TransactionItem {
  id            String      @id @default(cuid())
  transactionId String      @map("transaction_id")
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  productId     String      @map("product_id")
  product       Product     @relation(fields: [productId], references: [id])
  quantity      Int
  price         Float
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@map("transactions_items")
}

model Review {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  productId String   @map("product_id")
  product   Product  @relation(fields: [productId], references: [id])
  rating    Int
  comment   String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reviews")
}
